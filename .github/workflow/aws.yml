# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the Production branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

# This repo will deploy to both user-service and customer-acl

name: Deploy to Amazon ECS

on:
  release:
    types: [created]
  # run manually
  workflow_dispatch:
  push:
    branches:
      - test
      - master


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: test

    steps:
    - uses: actions/checkout@v2  
    - name: Set env to Test  
      id: set-test-env
      if: endsWith(github.ref, '/test')
      run: |
        echo "customer-service-test-repo" > ECR_REPOSITORY
        echo "test" > ENV_NAME

    - name: Set env to Prod  
      id: set-prod-env
      if: endsWith(github.ref, '/master')
      run: |
        echo "customer-service-repo" > ECR_REPOSITORY
        echo "prod" > ENV_NAME

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{AKIAYQHIW22BLJZRCPME}}
        aws-secret-access-key: ${{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
}}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        export ECR_REPOSITORY=$(cat ECR_REPOSITORY)
        echo "::set-output name=IMAGE::$ECR_REGISTRY/$(cat ECR_REPOSITORY):$IMAGE_TAG"
        docker build -t $ECR_REGISTRY/$(cat ECR_REPOSITORY):$IMAGE_TAG .
        docker push $ECR_REGISTRY/$(cat ECR_REPOSITORY):$IMAGE_TAG 
    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.node-react-fam }}
    #     container-name: ${{ Node-react }}
    #     image: ${{ sample-node-react:latest }}
    - name: Get deployed task definition for test
      if: endsWith(github.ref, '/test')
      run: |
        aws ecs describe-task-definition --task-definition  customer-service-$(cat ENV_NAME) --query taskDefinition --region ap-southeast-1 > task-definition.json

    - name: Get deployed task definition for Prod
      if: endsWith(github.ref, '/master')
      run: |
        aws ecs describe-task-definition --task-definition  customer-service --query taskDefinition --region ap-southeast-1 > task-definition.json
      
    - name: Render Amazon ECS task definition
      id: render-notification-service
      uses: jossef/action-set-json-field@v1
      with:
        file: task-definition.json
        field: containerDefinitions.0.image
        value: ${{ steps.build-image.outputs.IMAGE }}

    - name: Deploy Amazon ECS task definition to CALCULATOR-SERVICE TO TEST
      if: endsWith(github.ref, '/test')
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json
        service: 
        cluster: demo-cluster
        wait-for-service-stability: true
    
    - name: Deploy Amazon ECS task definition to CALCULATOR-SERVICE TO PROD
      if: endsWith(github.ref, '/master')
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json
        service: customer-service
        cluster: ecs-fargate-cluster-prod
        wait-for-service-stability: true
